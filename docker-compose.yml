version: '3.8' # docker-compose.yml에 사용될 문법 버전을 정의합니다.

volumes: # docker volume을 정의합니다.(docker volume)
  postgres: {}
  django_media: {}
  django_static: {}

services:
  backend: # service 이름을 지정합니다. service 이름은 컨테이너끼리 통신할 때 사용됩니다.
    container_name: todoSubject # 컨테이너 이름을 지정합니다.
    build: ./todoSubject # 현재 경로에 있는 Dockerfile을 사용해 이미지를 생성합니다.
    entrypoint: sh -c "python manage.py collectstatic --no-input && python manage.py migrate && gunicorn drf_project.wsgi --workers=5 -b 0.0.0.0:8000"
    volumes: # volume을 설정해줍니다(bind mount) 정의한 volume의 mount할 경로를 지정합니다.
      - ./backend/django/:/app/ 
      - /etc/localtime:/etc/localtime:ro
      - django_media:/app/media/ # nginx에서 media를 사용할 수 있도록 volume을 지정해줍니다.
      - django_static:/app/static/ # nginx에서 static을 사용할 수 있도록 volume을 지정해줍니다.
    environment: # django에서 사용할 환경변수 설정들을 지정해줍니다.
      - DEBUG=1
      - POSTGRES_DB=django
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=P@ssw0rd
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
    depends_on: # 해당 컨테이너보다 먼저 실행되어야 하는 컨테이너를 지정합니다.
      - postgres
    restart: always # 컨테이너가 종료됐을 때 다시 실행시켜 줍니다.

  nginx:
    container_name : nginx
    image: nginx:1.23.2 # 컨테이너를 생성할 때 사용될 이미지를 지정합니다.
    ports: # 포트포워딩을 설정해줍니다.
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
      - django_media:/media/ # django의 media를 사용할 수 있도록 volume을 지정해줍니다.
      - django_static:/static/ # django의 static 사용할 수 있도록 volume을 지정해줍니다.
    depends_on:
      - backend
    restart: always
  postgres: 
    container_name: postgres 
    image: postgres:14.5 
    volumes:
      - postgres:/var/lib/postgresql/data/
    environment:
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=P@ssw0rd
      - POSTGRES_DB=django
    restart: always